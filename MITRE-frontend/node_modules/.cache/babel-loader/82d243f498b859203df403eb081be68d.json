{"ast":null,"code":"/*Reducer to update techniques state with constants defined too.*/\nimport axios from \"axios\"; //Define constantss\n\nconst FETCH_TECHID = 'FETCH_TECHID';\nconst FETCH_TECHNAME = 'FETCH_TECHNAME';\nconst FETCH_TECHALL = 'FETCH_TECHALL';\nconst FETCH_TECHSUB = 'FETCH_TECHSUB';\nconst FETCH_TECHTACTIC = 'FETCH_TECHTACTIC'; //Define Endpoints and also base path to be mapped\n\nconst ENDPOINTS = {\n  //\"base_path\": \"/mit/els-api-service\",\n  //\"base_path\": \"https://a85263f971abe47ee9429220e351b65f-c60ac902f2bae3ba.elb.us-east-1.amazonaws.com/mit/els-api-service\",\n  \"base_path\": \"http://localhost:8080/\",\n  \"techID\": \"/techID\",\n  \"techName\": \"/techName\",\n  \"techTactic\": \"/techTactic\",\n  \"techSubtechnique\": \"/techSubtechnique\",\n  \"techSubtechniqueOf\": \"/techSubtechniqueOf\",\n  \"techAll\": \"/techAll\"\n}; //Axios create headers and allow cross origin\n\nconst http = axios.create({\n  headers: {\n    \"Content-type\": \"application/json\",\n    \"Access-Control-Allow-Origin\": \"*\"\n  }\n});\naxios.defaults.headers.post['Access-Control-Allow-Origin'] = '*'; //Define initial state as empty array of techniqueObject\n\nconst initialState = {\n  techniqueObject: []\n}; //Tech reducer mapping state and actions in switch-case\n\nconst techReducer = function (state = initialState, action) {\n  if (typeof state === 'undefined') state = initialState;\n\n  switch (action.type) {\n    case FETCH_TECHID:\n      return { ...state,\n        techniqueObject: action.payload\n      };\n\n    case FETCH_TECHNAME:\n      return { ...state,\n        techniqueObject: action.payload\n      };\n\n    case FETCH_TECHALL:\n      return { ...state,\n        techniqueObject: action.payload\n      };\n\n    case FETCH_TECHSUB:\n      return { ...state,\n        techniqueObject: action.payload\n      };\n\n    case FETCH_TECHSUB:\n      return { ...state,\n        techniqueObject: action.payload\n      };\n\n    case FETCH_TECHTACTIC:\n      return { ...state,\n        techniqueObject: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n/*\nDefine all initialised constants, use http to get interact with REST endpoint and dispatch data \nwith type and data in payload for mapping in reducer\n*/\n\n\nexport const findTechByID = id => dispatch => {\n  http.get(ENDPOINTS.base_path + ENDPOINTS.techID + `/${id}`).then(response => {\n    console.log(\"RESPONSE \" + JSON.stringify(response));\n    console.log(\"RESPONSE data\" + JSON.stringify(response.data));\n    console.log(typeof response.data);\n    let response_list = [];\n    response_list = response.data.map(obj => {\n      return obj;\n    });\n    dispatch({\n      type: FETCH_TECHID,\n      payload: response_list\n    });\n  });\n};\nexport const findTechByName = name => dispatch => {\n  console.log(\"find tech\");\n  http.get(ENDPOINTS.base_path + ENDPOINTS.techName + `/${name}`).then(response => {\n    dispatch({\n      type: FETCH_TECHNAME,\n      payload: response.data\n    });\n  });\n};\nexport const findTechByAll = all => dispatch => {\n  console.log(\"find tech allll\");\n  http.get(ENDPOINTS.base_path + ENDPOINTS.techAll + `/${all}`).then(response => {\n    console.log(response.data);\n    dispatch({\n      type: FETCH_TECHALL,\n      payload: response.data\n    });\n  });\n};\nexport const findTechBySub = sub => dispatch => {\n  http.get(ENDPOINTS.base_path + ENDPOINTS.techSubtechnique + `/${sub}`).then(response => {\n    dispatch({\n      type: FETCH_TECHSUB,\n      payload: response.data\n    });\n  });\n};\nexport const findTechByTactic = tactic => dispatch => {\n  http.get(ENDPOINTS.base_path + ENDPOINTS.techTactic + `/${tactic}`).then(response => {\n    dispatch({\n      type: FETCH_TECHTACTIC,\n      payload: response.data\n    });\n  });\n};\nexport default techReducer;","map":{"version":3,"sources":["/home/ellika/Mitre-frontend/MITRE-frontend/src/reducers/techniques.js"],"names":["axios","FETCH_TECHID","FETCH_TECHNAME","FETCH_TECHALL","FETCH_TECHSUB","FETCH_TECHTACTIC","ENDPOINTS","http","create","headers","defaults","post","initialState","techniqueObject","techReducer","state","action","type","payload","findTechByID","id","dispatch","get","base_path","techID","then","response","console","log","JSON","stringify","data","response_list","map","obj","findTechByName","name","techName","findTechByAll","all","techAll","findTechBySub","sub","techSubtechnique","findTechByTactic","tactic","techTactic"],"mappings":"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","sourcesContent":["/*Reducer to update techniques state with constants defined too.*/\n\nimport axios from \"axios\";\n\n//Define constantss\nconst FETCH_TECHID = 'FETCH_TECHID';\nconst FETCH_TECHNAME = 'FETCH_TECHNAME';\nconst FETCH_TECHALL= 'FETCH_TECHALL';\nconst FETCH_TECHSUB= 'FETCH_TECHSUB';\nconst FETCH_TECHTACTIC= 'FETCH_TECHTACTIC';\n\n\n//Define Endpoints and also base path to be mapped\nconst ENDPOINTS = {\n    //\"base_path\": \"/mit/els-api-service\",\n    //\"base_path\": \"https://a85263f971abe47ee9429220e351b65f-c60ac902f2bae3ba.elb.us-east-1.amazonaws.com/mit/els-api-service\",\n    \"base_path\": \"http://localhost:8080/\",\n    \"techID\": \"/techID\",\n    \"techName\": \"/techName\",\n    \"techTactic\": \"/techTactic\",\n    \"techSubtechnique\": \"/techSubtechnique\",\n    \"techSubtechniqueOf\": \"/techSubtechniqueOf\",\n    \"techAll\":\"/techAll\"\n}\n\n//Axios create headers and allow cross origin\nconst http = axios.create({\n    headers: {\n        \"Content-type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\"\n    }\n});\naxios.defaults.headers.post['Access-Control-Allow-Origin'] = '*';\n\n\n//Define initial state as empty array of techniqueObject\nconst initialState = {\n\n    techniqueObject: []\n\n};\n\n//Tech reducer mapping state and actions in switch-case\nconst techReducer = function (state = initialState, action) {\n    if (typeof state === 'undefined') state = initialState;\n\n\n    switch (action.type) {\n\n        case FETCH_TECHID:\n            \n            return {\n                ...state,\n                techniqueObject: action.payload\n            }\n        case FETCH_TECHNAME:\n\n            return {\n                ...state,\n                techniqueObject: action.payload\n            }\n        \n        case FETCH_TECHALL:\n            return{\n                ...state,\n                techniqueObject:action.payload\n            }\n\n        case FETCH_TECHSUB:\n            return{\n                ...state,\n                techniqueObject:action.payload\n            }\n\n        case FETCH_TECHSUB:\n            return{\n                ...state,\n                techniqueObject:action.payload\n            }\n\n        case FETCH_TECHTACTIC:\n            return{\n                ...state,\n                techniqueObject:action.payload\n            }\n\n        default:\n            return state;\n    }\n}\n\n/*\nDefine all initialised constants, use http to get interact with REST endpoint and dispatch data \nwith type and data in payload for mapping in reducer\n*/\nexport const findTechByID = (id) => (dispatch) => {\n\n\n    http.get(ENDPOINTS.base_path + ENDPOINTS.techID + `/${id}`).then((response) => {\n\n        console.log(\"RESPONSE \" + JSON.stringify(response))\n        console.log(\"RESPONSE data\" + JSON.stringify(response.data))\n        console.log(typeof(response.data))\n        let response_list=[]\n        response_list = response.data.map((obj)=>{\n            return obj\n        })\n\n        dispatch({\n            type: FETCH_TECHID,\n            payload: response_list\n        })\n    })\n};\n\nexport const findTechByName = (name) => (dispatch) => {\n\n    console.log(\"find tech\")\n    http.get(ENDPOINTS.base_path + ENDPOINTS.techName + `/${name}`).then((response) => {\n\n        dispatch({\n            type: FETCH_TECHNAME,\n            payload: response.data\n        })\n    })\n};\n\nexport const findTechByAll=(all)=>(dispatch)=>{\n    console.log(\"find tech allll\")\n    http.get(ENDPOINTS.base_path + ENDPOINTS.techAll + `/${all}`).then((response) => {\n        console.log(response.data)\n        dispatch({\n            type: FETCH_TECHALL,\n            payload: response.data\n        })\n    })\n};\n\nexport const findTechBySub=(sub)=>(dispatch)=>{\n    http.get(ENDPOINTS.base_path + ENDPOINTS.techSubtechnique + `/${sub}`).then((response) => {\n\n        dispatch({\n            type: FETCH_TECHSUB,\n            payload: response.data\n        })\n    })\n};\n\n\nexport const findTechByTactic=(tactic)=>(dispatch)=>{\n    http.get(ENDPOINTS.base_path + ENDPOINTS.techTactic + `/${tactic}`).then((response) => {\n\n        dispatch({\n            type: FETCH_TECHTACTIC,\n            payload: response.data\n        })\n    })\n};\n\n\nexport default techReducer;"]},"metadata":{},"sourceType":"module"}